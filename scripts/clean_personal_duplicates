#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2015 Avencall
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

import sys
import logging

from consul import Consul


logging.basicConfig(stream=sys.stdout, level=logging.INFO)
logger = logging.getLogger()

total = 0
removed = 0

PRIVATE_KEY = 'xivo/private'
PERSONAL_CONTACTS_KEY = 'xivo/private/{user_uuid}/contacts/personal/'
PERSONAL_CONTACT_KEY = 'xivo/private/{user_uuid}/contacts/personal/{contact_uuid}/'


def tree_from_consul(prefix, consul_entries):
    prefix = prefix or ''
    prefix_length = len(prefix)
    result = {}
    if consul_entries is None:
        return result
    for consul_entry in consul_entries:
        full_key = consul_entry['Key']
        if full_key.startswith(prefix):
            key_parts = full_key[prefix_length:].strip('/').split('/')
            parts_count = len(key_parts)
            value = (consul_entry.get('Value') or '').decode('utf-8')
            tree = result
            for part_index, key_part in enumerate(key_parts):
                default = {} if part_index < parts_count - 1 else value
                tree = tree.setdefault(key_part, default)
    return result


def list_users_uuid(personal_data):
    uuids = set()
    for uuid in personal_data.iterkeys():
        if uuid in uuids:
            continue
        uuids.add(uuid)
        yield uuid


def list_personal_contacts(personal_data, uuid):
    global total
    for contact_id, contact in personal_data[uuid]['contacts']['personal'].iteritems():
        total += 1
        key = PERSONAL_CONTACT_KEY.format(user_uuid=uuid, contact_uuid=contact_id)
        yield key, contact


def remove_kv(client, key):
    global removed
    logger.debug('Removing %s', key)
    removed += 1
    client.kv.delete(key, recurse=True)


def main():
    host = 'localhost'
    port = 8500
    token = sys.argv[1]

    logger.debug('Using the following consul config %s %s %s', host, port, token)
    client = Consul(host, port, token)

    _, raw_private = client.kv.get(PRIVATE_KEY, recurse=True)
    personal_data = tree_from_consul(PRIVATE_KEY, raw_private)

    for uuid in list_users_uuid(personal_data):
        logger.debug('Cleaning %s personal contacts', uuid)
        users_contacts = set()
        for key, contact in list_personal_contacts(personal_data, uuid):
            if 'id' not in contact:
                remove_kv(client, key)
                continue
            del contact['id']
            hashable_contact = frozenset(contact.items())
            if hashable_contact not in users_contacts:
                users_contacts.add(hashable_contact)
            else:
                remove_kv(client, key)

    logger.info('Cleanup complete: removed %s contacts, kept %s/%s', removed, total - removed, total)


if __name__ == '__main__':
    main()
