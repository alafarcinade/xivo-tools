#!/bin/sh

# TODO :
# - remove unused variable,
# - use variable for iface name, iface mac, iface floating ip, iface netmask and iface router

MAC_XVMASTER="00:90:FB:AA:AA:AA"
MAC_XVSLAVE="00:90:FB:BB:BB:BB"


usage() {
    cat << EOF
    Script which sets the Virtual IP for each interface
    usage: $(basename $0) action
        action: start or stop to enable/disable Virtual IPs on slave
EOF
}

enable_virtual_ip() {

## Add the two lines below for each Floating IP and iface replacing :
## - IPADDR = Floating IP,
## - NETMASK = Netmask,
## - IFACE = interface name (i.e. eth0)
## - ROUTER_IP = Router IP of the network
##
# ip addr add IPADDR/NETMASK dev IFACE
# arping -S IPADDR -s ${MAC_XVSLAVE} -c 5 -i IFACE ROUTER_IP

	# VLAN Data
	ip addr add 192.168.31.216/255.255.0.0 dev eth0
	arping -S 192.168.31.216 -s ${MAC_XVSLAVE} -c 5 -i eth0 192.168.31.2

	# VLAN VoIP
	ip addr add 172.20.31.216/255.255.0.0 dev eth0.3
	arping -S 172.20.31.216 -s ${MAC_XVSLAVE} -c 5 -i eth0.3 172.20.1.1
}


disable_virtual_ip() {

## Add the two lines below for each Floating IP and iface replacing :
## - IPADDR = Floating IP,
## - NETMASK = Netmask,
## - IFACE = interface name (i.e. eth0i or eth0.3)
## - XVSLAVE_IPADDR = IP xivo-slave
## - ROUTER_IP = Router IP of the network
##
# ip addr del IPADDR/NETMASK dev IFACE
# arping -S XVSLAVE_IPADDR -s ${MAC_XVSLAVE} -c 5 -i IFACE ROUTER_IP

	# VLAN Data
	ip addr del 192.168.31.216/255.255.0.0 dev eth0
	arping -S 192.168.31.214 -s ${MAC_XVSLAVE} -c 5 -i eth0 192.168.31.2
	
	# VLAN VoIP
	ip addr del 172.20.31.216/255.255.0.0 dev eth0.3
	arping -S 172.20.31.214 -s ${MAC_XVSLAVE} -c 5 -i eth0.3 172.20.1.1
}

case $1 in
    start) enable_virtual_ip;;
    stop)  disable_virtual_ip;;
    *) usage;;
esac

