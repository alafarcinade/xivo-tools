#!/usr/bin/python
import argparse
import logging
import os
import sys
import sh

logging.basicConfig(level=logging.DEBUG)

POSTGRES_USER = 'postgres'

INSTALLED_SCHEMA = '/tmp/%s_installed.sql'
MIGRATED_SCHEMA = '/tmp/%s_migrated.sql'

CWD_PATH = os.path.abspath(os.path.dirname(__file__))


def argparser():
    parser = argparse.ArgumentParser('compare XiVO database schemas and check for inconsitencies')
    parser.add_argument('--projects', help='Path to xivo git repos',
                        default=os.path.expanduser('~/xivo'))
    parser.add_argument('--apgdiff', help='Path to apgdiff jar',
                        default='/opt/apgdiff/apgdiff-2.4.jar')
    parser.add_argument('--ast-schema',
                        help='asterisk schema to start migration from',
                        default=os.path.join(CWD_PATH, 'schemas', 'asterisk.sql'))
    parser.add_argument('--xivo-schema',
                        help='xivo schema to start migration from',
                        default=os.path.join(CWD_PATH, 'schemas', 'xivo.sql'))

    return parser


def main():
    parser = argparser()
    args = parser.parse_args()

    differences_asterisk = compare_databases('asterisk', args.ast_schema, args.projects, args.apgdiff)
    differences_xivo = compare_databases('xivo', args.xivo_schema, args.projects, args.apgdiff)

    if differences_asterisk or differences_xivo:
        print "Database schemas are different !"
        print "Differences in asterisk :"
        print
        print differences_asterisk
        print
        print "Differences in xivo :"
        print
        print differences_xivo
        sys.exit(1)
    else:
        print "Database schemas are the same"


def compare_databases(database, pre_migration_script, gitroot, apgdiff):
    install_script = path_for_install_script(gitroot, database)
    migration_folder = path_for_migration_scripts(gitroot)

    installed_schema = generate_install_schema(database, install_script)
    migrated_schema = generate_migrated_schema(database, pre_migration_script, migration_folder)

    return compare_schemas(apgdiff, installed_schema, migrated_schema)


def path_for_install_script(gitroot, database):
    path = os.path.join(gitroot, 'xivo-manage-db', 'xivo-manage-db', 'datastorage', '%s.sql' % database)
    return path


def path_for_migration_scripts(gitroot):
    path = os.path.join(gitroot, 'xivo-manage-db', 'xivo-manage-db', 'migration')
    return path


def generate_install_schema(database, install_script):
    logging.info("generating installation schema for %s", database)
    reset_database(database)
    run_script(database, install_script)

    filepath = INSTALLED_SCHEMA % database
    extract_database_schema(database, filepath)
    return filepath


def generate_migrated_schema(database, pre_migration_script, migration_folder):
    logging.info("generating migration schema for %s", database)
    reset_database(database)
    run_script(database, pre_migration_script)

    migration_files = find_migration_files(migration_folder, database)
    for migration_file in migration_files:
        run_script(database, migration_file)

    filepath = MIGRATED_SCHEMA % database
    extract_database_schema(database, filepath)
    return filepath


def reset_database(database):
    logging.info("resetting database %s", database)
    delete_database(database)
    create_database(database, database)


def delete_database(db_name):
    with sh.sudo(u=POSTGRES_USER, _with=True):
        sql = 'DROP DATABASE IF EXISTS %s;' % db_name
        sh.psql('-c', sql)


def create_database(db_name, db_user):
    with sh.sudo(u=POSTGRES_USER, _with=True):
        sh.createdb('-E', 'utf8', '-O', db_user, db_name)


def run_script(database, filepath):
    logging.info("running script %s", filepath)
    with sh.sudo(u=POSTGRES_USER, _with=True):
        sh.psql('-U', database, database, '-f', filepath)


def extract_database_schema(database, filepath):
    logging.info("extracting database schema for %s", database)
    with sh.sudo(u=POSTGRES_USER, _with=True):
        sh.pg_dump('-s', '-f', filepath, database)


def find_migration_files(migration_folder, database):
    files = [os.path.join(migration_folder, f)
             for f in os.listdir(migration_folder)
             if f.startswith(database)]
    files.sort()
    return files


def compare_schemas(apgdiff, path_original, path_migrated):
    logging.info("comparing %s and %s", path_original, path_migrated)
    output = sh.java('-jar', apgdiff, path_original, path_migrated)
    return unicode(output)


if __name__ == "__main__":
    main()
