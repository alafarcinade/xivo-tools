#!/usr/bin/env python2
# -*- coding: UTF-8 -*-

from __future__ import unicode_literals


import random
import string
import csv
import sys

from cStringIO import StringIO

ENTRIES = 100
EXTEN_START = 6000

LANGUAGES = ["de_DE", "en_US", "fr_FR", "fr_CA"]
CTI_PROFILES = ["Supervisor", "Agent", "Switchboard", "Client"]
HEADERS = {
    'entity_id': 'entityid',
    'firstname': 'firstname',
    'lastname': 'lastname',
    'language': 'language',
    'username': 'username',
    'password': 'password',
    'mobile_phone_number': 'mobilephonenumber',
    'outgoing_caller_id': 'outcallerid',
    'cti_profile_enabled': 'enableclient',
    'cti_profile_name': 'profileclient',
    'supervision_enabled': 'enablehint',
    'call_transfer_enabled': 'enablexfer',
    'exten': 'phonenumber',
    'context': 'context',
    'line_protocol': 'protocol',
    'incall_exten': 'incallexten',
    'incall_context': 'incallcontext',
    'incall_ring_seconds': 'incallringseconds',
    'voicemail_name': 'voicemailname',
    'voicemail_number': 'voicemailnumber',
    'voicemail_context': 'voicemailcontext',
    'voicemail_password': 'voicemailpassword',
    'voicemail_email': 'voicemailemail',
    'voicemail_attach_audio': 'voicemailattach',
    'voicemail_ask_password': 'voicemailaskpassword',
    'voicemail_delete_messages': 'voicemaildelete',
    'sip_username': 'linename',
    'sip_secret': 'linesecret',
    'simultaneous_calls': 'simultcalls',
    'ring_seconds': 'ringseconds',
}


def load_dict():
    with open('/usr/share/dict/cracklib-small') as f:
        return tuple(l.strip() for l in f)


def digit_string(digits=10):
    return "".join(str(random.randint(0, 9)) for _ in range(digits))


def generate_rows():
    words = load_dict()
    for i in range(ENTRIES):
        yield generate_row(i, words)


def name(words):
    word = random.choice(words)
    return (word
            .decode('utf-8')
            .replace("a", "à")
            .replace("e", "é")
            .replace("o", "ô")
            .replace("i", "ï")
            .replace("u", "ù")
            .replace("c", "ç"))


def plain_gibberish(digits=8):
    return "".join(random.choice(string.hexdigits) for _ in range(digits))


def random_bool():
    return random.choice(["0", "1"])


def generate_row(i, words):
    exten = str(EXTEN_START + i)
    outgoing_caller_id = '"{} {}" <{}>'.format(name(words).replace("'", ""),
                                               name(words).replace("'", ""),
                                               digit_string())
    row = {
        'entity_id': "1",
        'firstname': name(words),
        'lastname': name(words),
        'language': random.choice(LANGUAGES),
        'username': plain_gibberish(),
        'password': plain_gibberish(),
        'mobile_phone_number': digit_string(),
        'outgoing_caller_id': outgoing_caller_id,
        'cti_profile_enabled': random_bool(),
        'cti_profile_name': random.choice(CTI_PROFILES),
        'supervision_enabled': random_bool(),
        'call_transfer_enabled': random_bool(),
        'exten': exten,
        'context': 'default',
        'line_protocol': random.choice(["sip", "sccp"]),
        'incall_exten': exten,
        'incall_context': 'from-extern',
        'incall_ring_seconds': str(random.randint(1, 60)),
        'voicemail_name': name(words),
        'voicemail_number': exten,
        'voicemail_context': 'default',
        'voicemail_password': digit_string(4),
        'voicemail_email': 'email@example.com',
        'voicemail_attach_audio': random_bool(),
        'voicemail_ask_password': random_bool(),
        'voicemail_delete_messages': random_bool(),
        'simultaneous_calls': str(random.randint(1, 20)),
        'ring_seconds': str(random.randrange(0, 60, 5)),
    }

    if row['line_protocol'] == "sip" and random.randint(0, 1) == 1:
        row['sip_username'] = plain_gibberish()
        row['sip_secret'] = plain_gibberish()

    return row


def output_csv(rows, headers, delimiter=b","):
    output = StringIO()
    writer = csv.DictWriter(output, headers, delimiter=delimiter)
    writer.writeheader()
    for row in rows:
        data = {key.encode('utf8'): value.encode('utf8')
                for key, value in row.iteritems()}
        writer.writerow(data)

    return output.getvalue()


def rename_headers(rows):
    for row in rows:
        renamed = {HEADERS[key]: value for key, value in row.iteritems()}
        yield renamed


if __name__ == "__main__":
    if len(sys.argv) > 1:
        ENTRIES = int(sys.argv[1])

    # these 2 lines generate a CSV for the webi
    # rows = list(rename_headers(generate_rows()))
    # headers = HEADERS.values()
    # print output_csv(rows, headers, b"|")

    rows = list(generate_rows())
    headers = HEADERS.keys()
    print output_csv(rows, headers)
