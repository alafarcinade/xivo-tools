#!/usr/bin/env python
import requests
import json
import click
from IPython import embed
from pprint import pprint

from xivo_confd_client import Client

HOST = "dev"
PORT = 9486
USERNAME = "admin"
PASSWORD = "proformatique"

HEADER = """A confd client is available as the 'c' variable.
You can interact with the client in the following ways:

c.get("/users", search="joe")
c.post("/users", firstname="John", lastname="Doe")
c.put("/users/42", username="john")
c.delete("/users/42")

connected to: {scheme}://{host}:{port}
"""


class Confd(object):

    @classmethod
    def from_options(cls, host, port, username, password, https=True):
        scheme = 'https' if https else 'http'
        url = "{}://{}:{}/1.1".format(scheme, host, port)
        return cls(url, username, password)

    def __init__(self, base_url, username, password):
        self.base_url = base_url
        self.username = username
        self.password = password
        self.create_session()

    def create_session(self):
        self.session = requests.Session()
        self.session.auth = requests.auth.HTTPDigestAuth(self.username,
                                                         self.password)
        self.session.verify = False
        self.session.headers = {'Accept': 'application/json',
                                'Content-Type': 'application/json'}

    def reload(self):
        self.create_session()

    def __repr__(self):
        return '<Confd client "{}">'.format(self.base_url)

    def request(self, method, url, query=None, body=None):
        full_url = self._build_url(url)
        query = query or {}
        body = body or {}
        body = self._encode_parameters(body)

        response = self.session.request(method, full_url, params=query, data=body)
        pprint(response.headers)

        self._check_status(response)
        decoded_response = self._decode_response(response)
        return decoded_response

    def get(self, url, **parameters):
        """send GET request"""
        return self.request('GET', url, query=parameters)

    def post(self, url, query=None, **parameters):
        """send POST request. Parameters will be json-encoded in the body"""
        return self.request('POST', url, query=query, body=parameters)

    def put(self, url, query=None, **parameters):
        """send PUT request. Parameters will be json-encoded in the body"""
        return self.request('PUT', url, query=query, body=parameters)

    def delete(self, url, **parameters):
        """send DELETE request. Parameters will be json-encoded in the body"""
        return self.request('DELETE', url, query=parameters)

    def _encode_parameters(self, parameters):
        return json.dumps(parameters)

    def _build_url(self, url):
        return '/'.join((self.base_url, url.lstrip('/')))

    def _check_status(self, response):
        if response.status_code >= 300:
            raise Exception('status: %d. response: %s',
                            response.status_code,
                            response.text)

    def _decode_response(self, response):
        decoded = response.json() if response.text else None
        return decoded


@click.command()
@click.option('--host', default=HOST)
@click.option('--port', default=PORT, type=click.INT)
@click.option('--username', default=USERNAME)
@click.option('--password', default=PASSWORD)
@click.option('--client/--no-client', default=False)
@click.option('--https/--no-https', default=True)
def console(host, port, username, password, client, https):
    if client:
        c = Client(host,
                   https=True,
                   port=port,
                   username=username,
                   password=password,
                   verify_certificate=False)
    else:
        c = Confd.from_options(host, port, username, password, https)
    embed(header=HEADER.format(scheme=("https" if https else "http"),
                               host=host,
                               port=port))


if __name__ == "__main__":
    console()
