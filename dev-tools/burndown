#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import argparse
import datetime
import os
import subprocess
import tempfile

_ONE_DAY = datetime.timedelta(days=1)
_PLOT_FILENAME = 'burndown.ps'


def main():
    parsed_args = _parse_args()

    if not parsed_args.start:
        parsed_args.start = _this_week_wednesday()
    if not parsed_args.end:
        parsed_args.end = _next_week_wednesday()

    data = _generate_data(parsed_args.start, parsed_args.end, parsed_args.hours)
    datafile = _write_datafile(data)
    try:
        _create_plotfile(datafile, parsed_args.title)
        print 'wrote %s' % _PLOT_FILENAME
    finally:
        os.remove(datafile)


def _parse_args():
    parser = _new_argument_parser()
    return parser.parse_args()


def _new_argument_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--title')
    parser.add_argument('-s', '--start', type=_date,
                        help='start date in YYYY-MM-DD format')
    parser.add_argument('-e', '--end', type=_date,
                        help='end date in YYYY-MM-DD format')
    parser.add_argument('hours', type=int)
    return parser


def _date(value):
    return datetime.datetime.strptime(value, '%Y-%m-%d').date()


def _this_week_wednesday():
    today = datetime.date.today()
    return today + datetime.timedelta(days=2 - today.weekday())


def _next_week_wednesday():
    next_week_date = datetime.date.today() + datetime.timedelta(days=7)
    return next_week_date + datetime.timedelta(days=2 - next_week_date.weekday())


def _generate_data(start_date, end_date, hours):
    if end_date <= start_date:
        raise ValueError('end date must be after start date')

    data_rows = []

    days = list(_days_between(start_date, end_date))
    nb_days = len(days)
    hours_per_day = float(hours) / nb_days
    for day_no, day in enumerate(days):
        hours_left = hours - (day_no * hours_per_day)
        data_rows.append(_format_data_row(day_no, day, hours_left))

    for i in xrange(1, 3):
        data_rows.append(_format_data_row(day_no + i, day + datetime.timedelta(days=i), 0.0))

    return '\n'.join(data_rows)


def _days_between(start_date, end_date):
    current_date = start_date
    while current_date <= end_date:
        if not _is_weekend(current_date):
            yield current_date
        current_date += _ONE_DAY


def _is_weekend(date):
    return date.weekday() >= 5


def _format_data_row(day_no, day, hours_left):
    day_string = day.strftime('%a. %d')
    return '%d "%s" %.1f' % (day_no, day_string, hours_left)


def _write_datafile(data):
    fd, filename = tempfile.mkstemp('.dat')
    try:
        os.write(fd, data)
    finally:
        os.close(fd)

    return filename


def _create_plotfile(datafile, title):
    gnuplot_input = _get_gnuplot_input(datafile, title)
    process = subprocess.Popen(['gnuplot'], stdin=subprocess.PIPE)
    process.communicate(gnuplot_input)


def _get_gnuplot_input(datafile, version_title):
    title = _get_title(version_title)
    gnuplot_input = r'''
set title "%s"
set xlabel "Date"
set ylabel "Hours left"
set grid

set term postscript colour
set output "%s"

plot "%s" using 1:3:xtic(2) notitle with linespoints
''' % (title, _PLOT_FILENAME, datafile)
    return gnuplot_input


def _get_title(version):
    if version:
        version = ' ' + version
    else:
        version = ''
    return r'XiVO%s\nBurn Down Chart' % version


if __name__ == '__main__':
    main()
