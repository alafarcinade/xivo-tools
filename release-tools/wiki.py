import requests
import datetime

WIKI_URL = "https://wiki.xivo.fr/api.php"

TEMPLATE = r"""
{{{{Robelbox|title=Downloads|theme={{{{{{theme|3}}}}}}}}}}
{{{{Padbox}}}}

* [http://mirror.xivo.io/iso/archives/xivo-{version}/xivo-{version}.iso XiVO install CD] ({version})
* [http://mirror.xivo.io/iso/xivo-current XiVO client]
* [http://mirror.xivo.io/iso/archives Older versions]

{{{{Padbox/close}}}}
{{{{Robelbox/close}}}}

<!-- Automatically generated by release tools fabfile on {date} -->
""".strip()


def update_link(config, version):
    api = WikimediaApi(config.get('wiki', 'url'),
                       config.get('wiki', 'username'),
                       config.get('wiki', 'password'),
                       config.get('wiki', 'domain'))

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    content = TEMPLATE.format(version=version, date=now)

    api.login()
    api.edit_page(config.get('wiki', 'page'), content)


class WikimediaApi(object):

    def __init__(self, url, username, password, domain):
        self.base_url = url
        self.username = username
        self.password = password
        self.domain = domain

        self.session = requests.session()
        self.session.verify = False

    def login(self):
        params = {'action': 'login',
                  'lgname': self.username,
                  'lgpassword': self.password,
                  'lgdomain': self.domain}

        response = self._request('POST', params)

        token = response['login']['token']
        params['lgtoken'] = token
        self._request('POST', params, token)

    def _query(self, title):
        params = {'action': 'query',
                  'titles': title,
                  'prop': 'info|revisions',
                  'intoken': 'edit',
                  'rvprop': 'content'}

        response = self._request('GET', params)
        return response['query']

    def _token_for_page(self, title):
        query = self._query(title)
        _, page = query['pages'].popitem()
        return page['edittoken']

    def edit_page(self, title, content):
        token = self._token_for_page(title)

        params = {'action': 'edit',
                  'title': title,
                  'text': content,
                  'token': token}
        return self._request('POST', params)

    def _request(self, method, params, data=None):
        params['format'] = 'json'
        response = self.session.request(method, self.base_url, params=params, data=data)

        if response.status_code >= 300:
            msg = "Status: {status}. Response: {response}"
            raise Exception(msg.format(status=response.status_code, response=response.text))

        return response.json()
