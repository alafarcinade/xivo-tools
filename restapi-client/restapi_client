#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# Copyright (C) 2013 Avencall
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

from __future__ import unicode_literals

import requests
import json
import argparse
import logging

logging.basicConfig(level=logging.INFO)


def main():
    parsed_args = _parse_args()

    if parsed_args.debug:
        logging.basicConfig(level=logging.DEBUG)
        logging.debug('Debug mode enabled.')

    restapi_client = RestAPIClient(scheme=parsed_args.scheme,
                                   hostname=parsed_args.hostname,
                                   port=parsed_args.port,
                                   protocol_version=parsed_args.protocol_version,
                                   username=parsed_args.username,
                                   password=parsed_args.password)
    restapi_client.connect()

    if parsed_args.create_voicemail:
        restapi_client.create_voicemail(number=parsed_args.create_voicemail,
                                        context=parsed_args.context,
                                        name=parsed_args.voicemail_name)

    if parsed_args.create_voicemail_link:
        restapi_client.create_voicemail_link(user_id=parsed_args.user_id,
                                             voicemail_id=parsed_args.voicemail_id)

    if parsed_args.delete_extension:
        restapi_client.delete_extension(context=parsed_args.context,
                                        exten=parsed_args.extension)

    if parsed_args.create_extension:
        restapi_client.create_extension(context=parsed_args.context,
                                        exten=parsed_args.extension)

    if parsed_args.delete_line:
        restapi_client.delete_line(parsed_args.line_id)

    if parsed_args.create_line:
        restapi_client.create_line(context=parsed_args.context,
                                   device_slot=parsed_args.device_slot)

    if parsed_args.create_user:
        restapi_client.create_user(firstname=parsed_args.firstname,
                                   lastname=parsed_args.lastname)

    if parsed_args.deassociate_line:
        restapi_client.delete_user_links_for_line(parsed_args.line_id)

    if parsed_args.create_user_links:
        if _has_user_link_id_parameters(parsed_args):
            user_ids = [int(u) for u in parsed_args.user_ids.split(',')]
            extension_id = parsed_args.extension_id
            line_id = parsed_args.line_id
            restapi_client.create_user_links(user_ids, extension_id, line_id)
        else:
            restapi_client.create_user_links_from_resources()

    if parsed_args.synchronize:
        restapi_client.synchronize(parsed_args.device_id)


def _has_user_link_id_parameters(parsed_args):
    parameters = ['user_ids', 'extension_id', 'line_id']
    return _has_parameters(parsed_args, parameters)


def _has_user_link_parameters(parsed_args):
    parameters = ['create_user', 'create_extension', 'create_line']
    return _has_parameters(parsed_args, parameters)


def _has_parameters(parsed_args, parameters):
    defined = vars(parsed_args)
    for param in parameters:
        exists = defined.get(param, None)
        if not exists:
            return False
    return True


def _parse_args():
    parser = _new_argument_parser()

    args = parser.parse_args()

    if args.create_extension and not args.extension:
        parser.error('--create-extension can only be used with --extension')
    if args.delete_extension and not args.extension:
        parser.error('--delete-extension can only be used with --extension')

    if args.create_user and not args.firstname:
        parser.error('--create-user can only be used with --firstname')
    if args.firstname and not args.create_user:
        parser.error('--firstname can only be used with --create-user')

    if args.synchronize and not args.device_id:
        parser.error('--synchronize can only be used with --device-id')
    if args.device_id and not args.synchronize:
        parser.error('--device-id can only be used with --synchronize')

    if args.delete_line and not args.line_id:
        parser.error('--delete-line can only be used with --line-id')

    if args.deassociate_line and not args.line_id:
        parser.error('--deassociate-line can only be user with --line-id')

    if args.create_user_links:
        if not (_has_user_link_parameters(args) or _has_user_link_id_parameters(args)):
            msg = '--create-user-links can only be used with --user-id, --line-id, --extension-id. or \n'
            msg += '--create-user-links can only be used with --create-user, --create-extension, --create-line.'
            parser.error(msg)

    if args.create_voicemail_link and not (args.user_id and args.voicemail_id):
        parser.error('--create-voicemail-link can only be used with --user-id and --voicemail-id')

    return args


def _new_argument_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-d',
                        '--debug',
                        action='store_true',
                        default=False,
                        help='Activate debug message. Default: %(default)s')
    parser.add_argument('--hostname',
                        default='skaro-rc.lan-quebec.avencall.com',
                        help='XIVO server hostname')
    parser.add_argument('--protocol-version',
                        default=1.1,
                        help='XIVO RESTAPI protocol version. Default: %(default)s')
    parser.add_argument('--scheme',
                        default='https',
                        help='XIVO RESTAPI scheme. Default: %(default)s')
    parser.add_argument('--port',
                        type=_port_number,
                        default=50051,
                        help='Listen on port <port> instead of %(default)s')
    parser.add_argument('-u', '--username',
                        default='admin',
                        help='authentication username')
    parser.add_argument('-p', '--password',
                        default='proformatique',
                        help='authentication password')

    parser.add_argument('--create-extension',
                        action='store_true',
                        default=False,
                        help='Activate extension creation. Default: %(default)s')
    parser.add_argument('--delete-extension',
                        action='store_true',
                        default=False,
                        help='Delete extension. Default: %(default)s')
    parser.add_argument('--extension',
                        help='Exten for extension.')
    parser.add_argument('--context',
                        default='default',
                        help='Context for extension and line. Default: %(default)s')

    parser.add_argument('--create-line',
                        action='store_true',
                        default=False,
                        help='Activate line creation. Default: %(default)s')
    parser.add_argument('--delete-line',
                        action='store_true',
                        default=False,
                        help='Delete line. Default %(default)s')
    parser.add_argument('--device-slot',
                        default=1,
                        help='Device slot for line. Default: %(default)s')

    parser.add_argument('--create-user',
                        action='store_true',
                        default=False,
                        help='Activate user creation. Default: %(default)s')
    parser.add_argument('--firstname',
                        help='Firstname for user.')
    parser.add_argument('--lastname',
                        default='',
                        help='Lastname for user. Default: %(default)s')

    parser.add_argument('--create-user-links',
                        action='store_true',
                        default=False,
                        help='Activate user_links creation. Default: %(default)s')
    parser.add_argument('--deassociate-line',
                        action='store_true',
                        default=False,
                        help='Deassociate all links associated to a line. Default: %(default)s')
    parser.add_argument('--user-ids',
                        help='comma-seperated list of user_ids for user_links.')
    parser.add_argument('--line-id',
                        type=int,
                        help='line_id for user_links.')
    parser.add_argument('--extension-id',
                        type=int,
                        help='extension-id for user_links.')

    parser.add_argument('--create-voicemail',
                        metavar='VOICEMAIL_NUMBER',
                        help='Create a voicemail.')
    parser.add_argument('--voicemail-name',
                        help='Voicemail name',
                        default=None)

    parser.add_argument('--create-voicemail-link',
                        action='store_true',
                        default=False,
                        help='Link a user with a voicemail')
    parser.add_argument('--user-id',
                        type=int,
                        help='user_id for voicemail link')
    parser.add_argument('--voicemail-id',
                        type=int,
                        help='voicmail_id for voicemail link')

    parser.add_argument('--synchronize',
                        action='store_true',
                        default=False,
                        help='Send synchronize message. Default: %(default)s')
    parser.add_argument('--device-id',
                        help='device-id used for synchronize.')

    return parser


def _port_number(value):
    try:
        port = int(value)
    except ValueError:
        raise argparse.ArgumentTypeError('%r is not a valid port number' % value)
    if port < 1 or port > 65535:
        raise argparse.ArgumentTypeError('%r is not a valid port number' % value)
    return port


class RestAPIClient(object):

    def __init__(self, scheme, hostname, port, protocol_version, username, password):
        self._url = None
        self._hostname = hostname
        self._username = username
        self._password = password
        self._session = None
        self._extension = None
        self._line = None
        self._users = []

        self._build_url(scheme, hostname, port, protocol_version)

    def _build_url(self, scheme, hostname, port, protocol_version):
        self._url = '%s://%s:%s/%s' % (scheme, hostname, port, protocol_version)

    def connect(self):
        logging.debug('Connecting to %s', self._hostname)

        auth = requests.auth.HTTPDigestAuth(self._username, self._password)
        headers = {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }

        self._session = requests.Session()
        self._session.auth = auth
        self._session.headers = headers
        self._session.verify = False

    def disconnect(self):
        logging.debug('Disconnecting from %s', self._hostname)

    def create_extension(self, exten, context):
        if self._extension is not None:
            logging.error('extension is already defined: %s', self._extension)

        exteninfo = {
            'exten': exten,
            'context': context
        }
        logging.debug('creating extension %s', exteninfo)
        resp = self._check_status(self._session.post('%s/extensions' % self._url, json.dumps(exteninfo)))
        self._extension = resp.json()
        logging.debug('Extension created with id: %d', self._extension['id'])

    def delete_extension(self, exten, context):
        result = self._check_status(self._session.get('%s/extensions' % self._url))
        extensions = result.json()['items']
        found = [e for e in extensions if e['exten'] == exten and e['context'] == context]
        for extension in found:
            logging.debug('deleting extension %(exten)s@%(context)s', extension)
            self._check_status(self._session.delete('%s/extensions/%s' % (self._url, extension['id'])))

    def create_line(self, context, device_slot):
        if self._line is not None:
            logging.error('line is already defined: %s', self._line)

        lineinfo = {
            'context': context,
            'device_slot': device_slot
        }
        logging.debug('creating line %s', lineinfo)
        resp = self._check_status(self._session.post('%s/lines_sip' % self._url, json.dumps(lineinfo)))
        self._line = resp.json()
        logging.debug('Line created with id: %d', self._line['id'])

    def delete_line(self, line_id):
        logging.debug('Deleting line with id %s', line_id)
        self._check_status(self._session.delete('%s/lines_sip/%s' % (self._url, line_id)))

    def create_user(self, firstname, lastname):
        userinfo = {
            'firstname': firstname,
            'lastname': lastname
        }
        logging.debug('creating user %s', userinfo)
        resp = self._check_status(self._session.post('%s/users' % self._url, json.dumps(userinfo)))
        user = resp.json()
        self._users.append(user)
        logging.debug('User created with id: %d', user['id'])

    def create_user_links(self, user_ids, extension_id, line_id):
        for user_id in user_ids:
            linkinfo = {
                'user_id': user_id,
                'extension_id': extension_id,
                'line_id': line_id
            }
            logging.debug('linking %s', linkinfo)
            resp = self._check_status(self._session.post('%s/user_links' % self._url, json.dumps(linkinfo)))

        resp = self._check_status(self._session.get('%s/lines_sip/%s' % (self._url, line_id)))
        line = resp.json()

        logging.info('Done ! Your provisioning number is %s', line['provisioning_extension'])

    def delete_user_links_for_line(self, line_id):
        logging.debug('Deassociating user links for line %s', line_id)
        user_links = self._user_links_for_line(line_id)
        main_link, secondary_links = self._split_main_link(user_links)

        for link in secondary_links:
            self._delete_link(link)

        self._delete_link(main_link)

    def _user_links_for_line(self, line_id):
        response = self._check_status(self._session.get('%s/lines/%s/user_links' % (self._url, line_id)))
        return response.json()['items']

    def _split_main_link(self, user_links):
        main_link = [l for l in user_links if l['main_user']][0]
        user_links.remove(main_link)

        return main_link, user_links

    def _delete_link(self, link):
        logging.debug('deleting link %s', link['id'])
        self._check_status(self._session.delete('%s/user_links/%s' % (self._url, link['id'])))

    def create_user_links_from_resources(self):
        user_ids = [u['id'] for u in self._users]
        extension_id = self._extension['id']
        line_id = self._line['id']
        self.create_user_links(user_ids, extension_id, line_id)

    def synchronize(self, device_id):
        logging.debug('Synchronize device %s', device_id)
        self._check_status(self._session.get('%s/devices/%s/synchronize' % (self._url, device_id)))

    def _check_status(self, response):
        if response.status_code >= 300:
            raise Exception('STATUS %s. %s' % (response.status_code, response.text))
        return response

    def create_voicemail(self, number, context, name=None):
        logging.debug('Creating voicemail %s@%s' % (number, context))
        voicemail = {
            'number': number,
            'context': context,
            'name': name,
        }

        response = self._check_status(self._session.post('%s/voicemails' % self._url, json.dumps(voicemail)))
        logging.debug('Created voicemail with id %s' % response.json()['id'])

    def create_voicemail_link(self, user_id, voicemail_id):
        logging.debug('Creating voicemail link between user %s and voicemail %s', user_id, voicemail_id)
        link = {
            'voicemail_id': voicemail_id
        }

        self._check_status(self._session.post('%s/users/%s/voicemail' % (self._url, user_id), json.dumps(link)))

if __name__ == '__main__':
    main()
