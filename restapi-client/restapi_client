#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2014 Avencall
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

import click as c
import logging
import requests
import json
import sys

restapi = None


class RestApi(object):

    @classmethod
    def from_options(cls, host, port, username, password):
        url = "https://{}:{}/1.1".format(host, port)
        return cls(url, username, password)

    def __init__(self, base_url, username, password):
        self.base_url = base_url
        self.session = requests.Session()
        self.session.verify = False
        self.session.auth = requests.auth.HTTPDigestAuth(username, password)
        self.session.headers = {'Accept': 'application/json',
                                'Content-Type': 'application/json'}

    def __call__(self, method, url, **parameters):
        full_url = self._build_url(url)
        parameters = self._encode_parameters(parameters)

        response = self.session.request(method, full_url, data=parameters)

        self._check_status(response)
        return self._decode_response(response)

    def _encode_parameters(self, parameters):
        logging.debug('parameters: %s', parameters)
        return json.dumps(parameters) if parameters else None

    def _build_url(self, url):
        return '/'.join((self.base_url, url.lstrip('/')))

    def _check_status(self, response):
        if response.status_code >= 300:
            logging.error('status: %d. response: %s',
                          response.status_code,
                          response.text)
            sys.exit(1)

    def _decode_response(self, response):
        decoded = response.json() if response.text else None
        logging.debug('response: %s', decoded)
        return decoded


@c.group()
@c.option('--debug', '-d', default=False, is_flag=True)
@c.option('--host', '-H', default='xivo-test', envvar='HOST')
@c.option('--port', '-p', default=50051, envvar='PORT', type=c.INT)
@c.option('--username', '-u', default='admin', envvar='USERNAME')
@c.option('--password', '-P', default='proformatique', envvar='PASSWORD')
def cli(debug, host, port, username, password):
    level = logging.DEBUG if debug else logging.INFO
    logging.basicConfig(level=level)

    logging.debug("host: %s, port: %d, username: %s, password: %s", host, port,
                  username, password)
    global restapi
    restapi = RestApi.from_options(host, port, username, password)


@c.command('extension')
@c.argument('exten')
@c.option('--context', default='default')
def create_extension(exten, context):
    logging.debug('creating extension %s@%s', exten, context)
    extension = restapi('POST', '/extensions', exten=exten, context=context)
    c.echo(extension['id'])


@c.command('line')
@c.option('--context', default='default')
@c.option('--slot', default=1, type=c.INT)
def create_line(context, slot):
    logging.debug('creating line (context: %s, slot: %d)', context, slot)
    line = restapi('POST', '/lines_sip', context=context, device_slot=slot)
    c.echo(line['id'])


@c.command('user')
@c.argument('name', nargs=-1)
def create_user(name):
    firstname, lastname = name[0], ' '.join(name[1:])
    logging.debug('creating user %s %s', firstname, lastname)

    user = restapi('POST', '/users', firstname=firstname, lastname=lastname)
    c.echo(user['id'])


@c.command('voicemail')
@c.argument('number')
@c.option('--context', default='default')
@c.option('--name')
def create_voicemail(number, context, name=None):
    logging.debug('creating voicemail %s@%s (name: %s)', number, context, name)
    voicemail = restapi('POST', '/voicemails', number=number, name=name, context=context)
    c.echo(voicemail['id'])


@c.command('extension')
@c.argument('extension_id', type=c.INT)
def delete_extension(extension_id):
    logging.debug('deleting extension id %d', extension_id)
    restapi('DELETE', '/extensions/{}'.format(extension_id))


@c.command('line')
@c.argument('line_id', type=c.INT)
def delete_line(line_id):
    logging.debug('deleting line id %d', line_id)
    restapi('DELETE', '/lines_sip/{}'.format(line_id))


@c.command('user')
@c.argument('user_id', type=c.INT)
def delete_user(user_id):
    logging.debug('deleting user id %d', user_id)
    restapi('DELETE', '/users/{}'.format(user_id))


@c.command('voicemail')
@c.argument('voicemail_id', type=c.INT)
def delete_voicemail(voicemail_id):
    logging.debug('deleting voicemail id %d', voicemail_id)
    restapi('DELETE', '/voicemails/{}'.format(voicemail_id))


@c.command('line-extension')
@c.argument('line_id', type=c.INT)
@c.argument('extension_id', type=c.INT)
def associate_line_extension(line_id, extension_id):
    logging.info('associating line %d with extension %d', line_id, extension_id)

    url = '/lines/{}/extensions'.format(line_id)
    restapi('POST', url, extension_id=extension_id)


@c.command('user-line')
@c.argument('user_id', type=c.INT)
@c.argument('line_id', type=c.INT)
def associate_user_line(user_id, line_id):
    logging.info('associating user %d with line %d', user_id, line_id)
    restapi('POST', '/users/{}/lines'.format(user_id), line_id=line_id)


@c.command('user-voicemail')
@c.argument('user_id', type=c.INT)
@c.argument('voicemail_od', type=c.INT)
def associate_user_voicemail(user_id, voicemail_id):
    logging.info('associating user %d with voicemail %d', user_id, voicemail_id)

    url = '/users/{}/voicemail'.format(user_id)
    restapi('POST', url, voicemail_id=voicemail_id)


@c.command('line-extension')
@c.argument('line_id', type=c.INT)
@c.argument('extension_id', type=c.INT)
def dissociate_line_extension(line_id, extension_id):
    logging.info('dissociating line %d from extension %d', line_id, extension_id)
    restapi('DELETE', '/lines/{}/extensions/{}'.format(line_id, extension_id))


@c.command('user-line')
@c.argument('user_id', type=c.INT)
@c.argument('line_id', type=c.INT)
def dissociate_user_line(user_id, line_id):
    logging.info('dissociating user %d from line %d', user_id, line_id)
    restapi('DELETE', '/users/{}/lines/{}'.format(user_id, line_id))


@c.command('user-voicemail')
@c.argument('user_id', type=c.INT)
def dissociate_user_voicemail(user_id):
    logging.info('dissociating user %d from voicemail', user_id)
    restapi('DELETE', '/users/{}/voicemail'.format(user_id))


@c.command('synchronize')
@c.argument('device_id')
def synchronize_device(device_id):
    logging.info('synchronizing device %s', device_id)
    restapi('GET', '/devices/%s/synchronize'.format(device_id))


@c.command('autoprov')
@c.argument('device_id')
def autoprov_device(device_id):
    logging.info('resetting device %s to autoprov', device_id)
    restapi('GET', '/devices/%s/autoprov'.format(device_id))


def build_parser():
    create = c.Group('create')
    create.add_command(create_extension)
    create.add_command(create_line)
    create.add_command(create_user)
    create.add_command(create_voicemail)

    delete = c.Group('delete')
    delete.add_command(delete_extension)
    delete.add_command(delete_line)
    delete.add_command(delete_user)
    delete.add_command(delete_voicemail)

    associate = c.Group('associate')
    associate.add_command(associate_line_extension)
    associate.add_command(associate_user_line)
    associate.add_command(associate_user_voicemail)

    dissociate = c.Group('dissociate')
    dissociate.add_command(dissociate_line_extension)
    dissociate.add_command(dissociate_user_line)
    dissociate.add_command(dissociate_user_voicemail)

    device = c.Group('device')
    device.add_command(synchronize_device)
    device.add_command(autoprov_device)

    cli.add_command(create)
    cli.add_command(delete)
    cli.add_command(associate)
    cli.add_command(dissociate)
    cli.add_command(device)

    return cli


if __name__ == '__main__':
    parser = build_parser()
    parser()
