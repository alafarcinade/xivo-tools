#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# Copyright (C) 2013 Avencall
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

from __future__ import unicode_literals

import os
import requests
import json
import argparse
import logging

logging.basicConfig(level=logging.INFO)
logging.getLogger('requests').setLevel(logging.WARN)


def main():
    parsed_args = _parse_args()

    if parsed_args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
        logging.debug('Debug mode enabled.')

    hostname = os.environ.get('HOST', parsed_args.hostname)

    restapi_client = RestAPIClient(scheme=parsed_args.scheme,
                                   hostname=hostname,
                                   port=parsed_args.port,
                                   protocol_version=parsed_args.protocol_version,
                                   username=parsed_args.username,
                                   password=parsed_args.password)
    restapi_client.connect()

    if parsed_args.create_voicemail:
        restapi_client.create_voicemail(number=parsed_args.create_voicemail,
                                        context=parsed_args.context,
                                        name=parsed_args.voicemail_name)

    if parsed_args.delete_voicemail:
        restapi_client.delete_voicemail(voicemail_id=parsed_args.delete_voicemail)

    if parsed_args.create_voicemail_link:
        restapi_client.create_voicemail_link(user_id=parsed_args.user_id,
                                             voicemail_id=parsed_args.voicemail_id)

    if parsed_args.delete_voicemail_link:
        restapi_client.delete_voicemail_link(user_id=parsed_args.user_id)

    if parsed_args.delete_extension:
        if parsed_args.extension_id:
            restapi_client.delete_extension_id(parsed_args.extension_id)
        else:
            restapi_client.delete_extension(context=parsed_args.context,
                                            exten=parsed_args.extension)

    if parsed_args.create_extension:
        restapi_client.create_extension(context=parsed_args.context,
                                        exten=parsed_args.extension)

    if parsed_args.delete_line:
        restapi_client.delete_line(parsed_args.line_id)

    if parsed_args.create_line:
        restapi_client.create_line(context=parsed_args.context,
                                   device_slot=parsed_args.device_slot)

    if parsed_args.delete_user:
        restapi_client.delete_user(parsed_args.user_id)

    if parsed_args.create_user:
        restapi_client.create_user(firstname=parsed_args.firstname,
                                   lastname=parsed_args.lastname)

    if parsed_args.dissociate_user_line:
        restapi_client.delete_user_lines(parsed_args.user_id)

    if parsed_args.associate_user_line:
        user_id = parsed_args.user_id
        line_id = parsed_args.line_id
        restapi_client.create_user_line(user_id, line_id)

    if parsed_args.dissociate_line_extension:
        restapi_client.delete_line_extension(parsed_args.line_id)

    if parsed_args.associate_line_extension:
        restapi_client.create_line_extension(parsed_args.line_id, parsed_args.extension_id)

    if parsed_args.synchronize:
        restapi_client.synchronize(parsed_args.device_id)


def _parse_args():
    parser = _new_argument_parser()

    args = parser.parse_args()

    if args.create_extension and not args.extension:
        parser.error('--create-extension can only be used with --extension')
    if args.delete_extension and not (args.extension or args.extension_id):
        parser.error('--delete-extension can only be used with --extension or --extension-id')

    if args.delete_user and not args.user_id:
        parser.error('--delete-user can only be used with --user-id')
    if args.create_user and not args.firstname:
        parser.error('--create-user can only be used with --firstname')
    if args.firstname and not args.create_user:
        parser.error('--firstname can only be used with --create-user')

    if args.synchronize and not args.device_id:
        parser.error('--synchronize can only be used with --device-id')
    if args.device_id and not args.synchronize:
        parser.error('--device-id can only be used with --synchronize')

    if args.delete_line and not args.line_id:
        parser.error('--delete-line can only be used with --line-id')

    if args.dissociate_user_line and not args.user_id:
        parser.error('--dissociate-user-line can only be user with --user-id')

    if args.associate_user_line and not (args.user_id and args.line_id):
        parser.error('--associate-user-line can only be used with --user-id and --line-id')

    if args.create_voicemail_link and not (args.user_id and args.voicemail_id):
        parser.error('--create-voicemail-link can only be used with --user-id and --voicemail-id')

    if args.delete_voicemail_link and not args.user_id:
        parser.error('--delete_voicemail_link can only be used with --user-id')

    return args


def _new_argument_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-d',
                        '--debug',
                        action='store_true',
                        default=False,
                        help='Activate debug message. Default: %(default)s')
    parser.add_argument('--hostname',
                        default='xivo-test.lan-quebec.avencall.com',
                        help='XIVO server hostname. you can also export HOST as an environment variable')
    parser.add_argument('--protocol-version',
                        default=1.1,
                        help='XIVO RESTAPI protocol version. Default: %(default)s')
    parser.add_argument('--scheme',
                        default='https',
                        help='XIVO RESTAPI scheme. Default: %(default)s')
    parser.add_argument('--port',
                        type=_port_number,
                        default=50051,
                        help='Listen on port <port> instead of %(default)s')
    parser.add_argument('-u', '--username',
                        default='admin',
                        help='authentication username')
    parser.add_argument('-p', '--password',
                        default='proformatique',
                        help='authentication password')

    parser.add_argument('--create-extension',
                        action='store_true',
                        default=False,
                        help='Activate extension creation. Default: %(default)s')
    parser.add_argument('--delete-extension',
                        action='store_true',
                        default=False,
                        help='Delete extension. Default: %(default)s')
    parser.add_argument('--extension',
                        help='Exten for extension.')
    parser.add_argument('--context',
                        default='default',
                        help='Context for extension and line. Default: %(default)s')

    parser.add_argument('--create-line',
                        action='store_true',
                        default=False,
                        help='Activate line creation. Default: %(default)s')
    parser.add_argument('--delete-line',
                        action='store_true',
                        default=False,
                        help='Delete line. Default %(default)s')
    parser.add_argument('--device-slot',
                        default=1,
                        help='Device slot for line. Default: %(default)s')

    parser.add_argument('--create-user',
                        action='store_true',
                        default=False,
                        help='Activate user creation. Default: %(default)s')
    parser.add_argument('--delete-user',
                        action='store_true',
                        default=False,
                        help='Delete user. Default: %(default)s')
    parser.add_argument('--firstname',
                        help='Firstname for user.')
    parser.add_argument('--lastname',
                        default='',
                        help='Lastname for user. Default: %(default)s')

    parser.add_argument('--associate-user-line',
                        action='store_true',
                        default=False,
                        help='Associate a user with a line. Default: %(default)s')
    parser.add_argument('--dissociate-user-line',
                        action='store_true',
                        default=False,
                        help='dissociate all lines from a user. Default: %(default)s')

    parser.add_argument('--associate-line-extension',
                        action='store_true',
                        default=False,
                        help='Associate a line with an extension. Default: %(default)s')
    parser.add_argument('--dissociate-line-extension',
                        action='store_true',
                        default=False,
                        help='dissociate a line from its extension. Default: %(default)s')

    parser.add_argument('--user-id',
                        type=int,
                        help='user-id for associations.')
    parser.add_argument('--line-id',
                        type=int,
                        help='line-id for associations.')
    parser.add_argument('--extension-id',
                        type=int,
                        help='extension-id for associations.')

    parser.add_argument('--create-voicemail',
                        metavar='VOICEMAIL_NUMBER',
                        help='Create a voicemail.')
    parser.add_argument('--delete-voicemail',
                        metavar='VOICEMAIL_ID',
                        help='Delete a voicemail.')
    parser.add_argument('--voicemail-name',
                        help='Voicemail name',
                        default=None)

    parser.add_argument('--create-voicemail-link',
                        action='store_true',
                        default=False,
                        help='Link a user with a voicemail')

    parser.add_argument('--delete-voicemail-link',
                        action='store_true',
                        default=False,
                        help='Unlink a user from his voicemail')

    parser.add_argument('--voicemail-id',
                        type=int,
                        help='voicemail_id for voicemail link')

    parser.add_argument('--synchronize',
                        action='store_true',
                        default=False,
                        help='Send synchronize message. Default: %(default)s')
    parser.add_argument('--device-id',
                        help='device-id used for synchronize.')

    return parser


def _port_number(value):
    try:
        port = int(value)
    except ValueError:
        raise argparse.ArgumentTypeError('%r is not a valid port number' % value)
    if port < 1 or port > 65535:
        raise argparse.ArgumentTypeError('%r is not a valid port number' % value)
    return port


class RestAPIClient(object):

    def __init__(self, scheme, hostname, port, protocol_version, username, password):
        self._url = None
        self._hostname = hostname
        self._username = username
        self._password = password
        self._session = None
        self._extension = None
        self._line = None
        self._users = []

        self._build_url(scheme, hostname, port, protocol_version)

    def _build_url(self, scheme, hostname, port, protocol_version):
        self._url = '%s://%s:%s/%s' % (scheme, hostname, port, protocol_version)

    def connect(self):
        logging.debug('Connecting to %s', self._hostname)

        auth = requests.auth.HTTPDigestAuth(self._username, self._password)
        headers = {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }

        self._session = requests.Session()
        self._session.auth = auth
        self._session.headers = headers
        self._session.verify = False

    def disconnect(self):
        logging.debug('Disconnecting from %s', self._hostname)

    def request(self, method, url, parameters=None):
        url = url.lstrip('/')
        full_url = '%s/%s' % (self._url, url)
        logging.debug('request: %s %s', method.upper(), full_url)

        if parameters:
            logging.debug('parameters: %s', parameters)
            parameters = json.dumps(parameters)

        response = self._session.request(method, full_url, data=parameters)
        self._check_status(response)

        if len(response.text) > 0:
            received = response.json()
        else:
            received = ''

        logging.debug('response: %s', received)
        return received

    def _check_status(self, response):
        if response.status_code >= 300:
            raise Exception('STATUS %s. %s' % (response.status_code, response.text))
        return response

    def create_extension(self, exten, context):
        exteninfo = {
            'exten': exten,
            'context': context
        }

        extension = self.request('POST', '/extensions', exteninfo)
        print extension['id']

    def delete_extension(self, exten, context):
        result = self.request('GET', '/extensions')
        extensions = result['items']
        found = [e for e in extensions if e['exten'] == exten and e['context'] == context]

        for extension in found:
            self.request('DELETE', '/extensions/%s' % extension['id'])

    def delete_extension_id(self, extension_id):
        self.request('DELETE', '/extensions/%d' % extension_id)

    def create_line(self, context, device_slot):
        lineinfo = {
            'context': context,
            'device_slot': device_slot
        }

        line = self.request('POST', '/lines_sip', lineinfo)
        print line['id']

    def delete_line(self, line_id):
        self.request('DELETE', '/lines_sip/%d' % line_id)

    def delete_user(self, user_id):
        self.request('DELETE', '/users/%d' % user_id)

    def create_user(self, firstname, lastname):
        userinfo = {
            'firstname': firstname,
            'lastname': lastname
        }

        user = self.request('POST', '/users', userinfo)
        print user['id']

    def create_user_line(self, user_id, line_id):
        linkinfo = {
            'line_id': line_id
        }
        self.request('POST', '/users/%d/lines' % user_id, linkinfo)

        line = self.request('GET', '/lines_sip/%d' % line_id)
        logging.info('Links created. Your provisioning number is %s', line['provisioning_extension'])

    def delete_user_lines(self, user_id):
        user_lines = self._lines_for_user(user_id)

        for user_line in user_lines:
            self._delete_user_line(user_line)

    def _lines_for_user(self, user_id):
        response = self.request('GET', '/users/%d/lines' % user_id)
        return response['items']

    def _delete_user_line(self, user_line):
        self.request('DELETE', '/users/%d/lines/%d' % (user_line['user_id'], user_line['line_id']))

    def create_line_extension(self, line_id, extension_id):
        info = {
            'extension_id': extension_id
        }

        self.request('POST', '/lines/%d/extension' % line_id, info)
        logging.info('Link created.')

    def delete_line_extension(self, line_id):
        self.request('DELETE', '/lines/%d/extension' % line_id)
        logging.info('Link deleted.')

    def synchronize(self, device_id):
        self.request('GET', '/devices/%s/synchronize' % device_id)

    def create_voicemail(self, number, context, name=None):
        logging.debug('Creating voicemail %s@%s' % (number, context))
        voicemail = {
            'number': number,
            'context': context,
            'name': name,
        }

        response = self.request('POST', '/voicemails', voicemail)
        print response['id']

    def delete_voicemail(self, voicemail_id):
        logging.info('Deleting voicemail with id %s' % voicemail_id)

        self._check_status(self._session.delete('%s/voicemails/%s' % (self._url, voicemail_id)))
        logging.info('Deleted voicemail with id %s' % voicemail_id)

    def create_voicemail_link(self, user_id, voicemail_id):
        link = {'voicemail_id': voicemail_id}
        self.request('POST', '/users/%d/voicemail' % user_id, link)
        logging.info('User %d linked with voicemail %d', user_id, voicemail_id)

    def delete_voicemail_link(self, user_id):
        self.request('DELETE', '/users/%d/voicemail' % user_id)
        logging.info('Link between User %d and voicemail deleted')


if __name__ == '__main__':
    main()
